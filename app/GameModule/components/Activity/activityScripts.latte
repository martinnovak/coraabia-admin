<script type="text/javascript" src="{$basePath}/js/jquery-ui.min.js"></script>
<script type="text/javascript" src="{$basePath}/js/knockout.min.js"></script>
<script type="text/javascript" src="{$basePath}/js/knockout-sortable.min.js"></script>
<script type="text/javascript">
	var activityData = {$activityData};
	var kapafaaDefinitions = {$kapafaaDefinitions};
</script>
<script type="text/javascript">
(function($, _, ko, undefined) {

	/**
	 * @param object data
	 * @returns Gameroom
	 */
	var Gameroom = function(data) {
		var self = this;
		/** @var string */
		this.id = data.id;
		/** @var function(string) */
		this.name = ko.observable(data.name);
		/** @var boolean */
		this.ready = data.ready;
		/** @var function(boolean) */
		this.activity_gameroom_ready = ko.observable(false);
		/** @var function(boolean) */
		this.visible = ko.observable(true);

		/**
		 * Toggle activity_gameroom_ready value or set to false when not ready.
		 * @returns undefined
		 */
		this.switchReady = function() {
			self.activity_gameroom_ready(self.ready ? !self.activity_gameroom_ready() : false);
		};
		
		/**
		 * Returns button class.
		 */
		this.getClass = ko.computed(function() {
			var result = 'btn';
			if (!self.ready) result = result + ' disabled';
			if (self.activity_gameroom_ready()) result = result + ' btn-warning';
			return result;
		});
		
		/**
		 * Called before object is dropped into sortable.
		 * @param object arg
		 * @param object event
		 * @param object ui
		 * @returns undefined
		 */
		this.dropped = function(arg, event, ui) {
			self.activity_gameroom_ready(false);
		};
	};
	
	/**
	 * @param object data
	 * @returns Activity
	 */
	var Activity = function(data) {
		/** @var string */
		this.id = data.id;
		/** @var function(string) */
		this.name = ko.observable(data.name);
		/** @var boolean */
		this.ready = data.ready;
		/** @var function(boolean) */
		this.visible = ko.observable(true);
	};

	/**
	 * @param array gamerooms
	 * @param array activities
	 * @returns Model
	 */
	var agModel = function(gamerooms, activities) {
		var self = this;
		
		this.gamerooms = ko.observableArray(gamerooms);
		this.gamerooms.id = 'gamerooms';
		this.activity_gamerooms = ko.observableArray([]);
		this.activity_gamerooms.id = 'gamerooms';
		this.searchGamerooms = ko.observable('');
		
		this._searchGamerooms = ko.computed(function() {
			_.each(this.gamerooms(), function(item) {
				item.visible(item.name().toLowerCase().indexOf(self.searchGamerooms().toLowerCase()) > -1);
			});
		}, this);
		this.gameroomList = ko.computed(function() {
			return _.map(this.activity_gamerooms(), function(item) {
				return item.id + '-' + (item.activity_gameroom_ready() ? 1 : 0);
			}).join('--');
		}, this);
		
		this.activities = ko.observableArray(activities);
		this.activities.id = 'activities';
		this.parent_activities = ko.observableArray([]);
		this.parent_activities.id = 'activities';
		this.searchActivities = ko.observable('');
		
		this._searchActivities = ko.computed(function() {
			_.each(this.activities(), function(item) {
				item.visible(item.name().toLowerCase().indexOf(self.searchActivities().toLowerCase()) > -1);
			});
		}, this);
		this.parentList = ko.computed(function() {
			return _.map(this.parent_activities(), function(item) {
				return item.id;
			}).join('--');
		}, this);
		
		this.beforeMove = function(arg, event, ui) {
			if (arg.sourceParent === undefined || arg.targetParent === undefined) {
				return;
			}
			if (arg.sourceParent.id !== arg.targetParent.id) {
				arg.cancelDrop = true;
			} else if (typeof arg.item.dropped === 'function') {
				arg.item.dropped(arg, event, ui);
			}
		};
	};
	
	var gamerooms = _.map(activityData.gamerooms, function(item) {
		return new Gameroom(item);
	});
	
	var activities = _.map(activityData.activities, function(item) {
		return new Activity(item);
	});
	
	var agmodel = new agModel(gamerooms, activities);
	ko.applyBindings(agmodel, document.getElementById('activity-connections'));
})(jQuery, _, ko);
</script>
<script type="text/javascript">
(function($, _, ko, undefined) {

	var Parameter = function(data, parent) {
		this.name = data.name;
		this.type = data.type.indexOf('\\') === 0 ? data.type.substring(1) : data.type;
		this.value = data.type.indexOf('\\') > -1 ? ko.observableArray([]) : ko.observable(data.value);
		this.value.parent = this;
		this.parent = parent;
	};

	var KapafaaObject = function(data) {
		var self = this;
		this.data = data;
		
		this.name = data.name;
		this.type = data.type;
		this.kapafaa = data.kapafaa;
		this.parent = data.parent;
		this.params = ko.observableArray(_.map(data.params, function(item) {
			return new Parameter(item, self);
		}));
		
		this.filtered = ko.observable(true);
		this.searched = ko.observable(true);
		
		this.visible = ko.computed(function() {
			return this.filtered() && this.searched();
		}, this);
		
		this.getClass = function() {
			var cl = 'btn';
			switch (self.parent) {
				case 'Framework\\Kapafaa\\Configs\\Config': cl += ' btn-info'; break;
				case 'Framework\\Kapafaa\\Triggers\\Trigger': cl += ' btn-success'; break;
				case 'Framework\\Kapafaa\\Conditions\\Condition': cl += ' btn-warning'; break;
				case 'Framework\\Kapafaa\\Effects\\Effect': cl += ' btn-danger'; break;
			}
			return cl;
		};
		
		//@TODO better
		this.toKapafaa = ko.computed(function() {
			var result = this.kapafaa;
			_.each(this.params(), function(item) {
				var re = new RegExp("%" + item.name + "%", "i");
				if (item.type === ':negation') {
					result = result.replace(re, item.value() ? '!' : '');
				}
				else if (item.type.indexOf('\\') > -1) {
					result = result.replace(re, item.value().length && item.value()[0] !== undefined ? item.value()[0].toKapafaa() : '');
				} else {
					result = result.replace(re, item.value() ? item.value() : '');
				}
			});
			return result;
		}, this);
	};
	
	var KapafaaScript = function() {
		this.kapafaa = ko.observableArray([]);
		
		this.toKapafaa = ko.computed(function() {
			return "(\n" + _.map(this.kapafaa(), function(item) {
				return item.toKapafaa() + "\n";
			}).join() + ")";
		}, this);
	};
	
	var kModel = function(definitions) {
		var self = this;
		
		this.definitions = ko.observableArray(definitions);
		
		this.scripts = ko.observableArray([new KapafaaScript()]);
		this.filterScripts = ko.observableArray([new KapafaaScript()]);
		
		this.addScript = function() {
			self.scripts.push(new KapafaaScript());
		};
		this.removeScript = function() {
			if (self.scripts().length > 1) {
				self.scripts.pop();
			}
		};
		
		this.addFilterScript = function() {
			self.filterScripts.push(new KapafaaScript());
		};
		this.removeFilterScript = function() {
			if (self.filterScripts().length > 1) {
				self.filterScripts.pop();
			}
		};
		
		this.toKapafaa = ko.computed(function() {
			return _.map(this.scripts(), function(item) {
				return item.toKapafaa();
			}).join("\n\n");
		}, this);
		this.filterToKapafaa = ko.computed(function() {
			return _.map(this.filterScripts(), function(item) {
				return item.toKapafaa();
			}).join("\n\n");
		}, this);
		
		this.searchDefinitions = ko.observable('');
		this._searchDefinitions = ko.computed(function() {
			_.each(this.definitions(), function(item) {
				item.searched(item.name.toLowerCase().indexOf(self.searchDefinitions().toLowerCase()) > -1);
			});
		}, this);
		
		this.filterObjects = ko.observable('');
		this._filterObjects = ko.computed(function() {
			var parents = this.filterObjects() === '' ? [
				'Framework\\Kapafaa\\Configs\\Config',
				'Framework\\Kapafaa\\Triggers\\Trigger',
				'Framework\\Kapafaa\\Effects\\Effect',
				'Framework\\Kapafaa\\Conditions\\Condition',
			] : [this.filterObjects()];
			_.each(this.definitions(), function(item) {
				item.filtered(parents.indexOf(item.parent) > -1);
			});
		}, this);
		
		this.resetFilters = function() {
			self.searchDefinitions('');
			self.filterObjects('');
		};
		
		this.setFilters = function(item, event) {
			self.searchDefinitions('');
			self.filterObjects(item.type);
		};
		
		this.dropped = function(item, event, ui) {
			return new KapafaaObject(item);
		};
		
		this.trash = ko.observableArray([]);
		this.trashed = ko.computed(function() {
			if (this.trash.length > 0) {
				this.trash([]);
			}
		}, this);
		
		this.beforeMove = function(arg, event, ui) {
			if (arg.item.parent !== arg.targetParent.parent.type) {
				arg.cancelDrop = true;
			}
		};
		
		this.beforeMoveRoot = function(arg, event, ui) {
			var parents = [
				'Framework\\Kapafaa\\Configs\\Config',
				'Framework\\Kapafaa\\Triggers\\Trigger',
				'Framework\\Kapafaa\\Effects\\Effect',
				'Framework\\Kapafaa\\Conditions\\Condition'];
			if (parents.indexOf(arg.item.parent) < 0) {
				arg.cancelDrop = true;
			}
		};
	};

	var definitions = _.map(kapafaaDefinitions, function(item) {
		return new KapafaaObject(item);
	});

	var kmodel = new kModel(definitions);
	ko.applyBindings(kmodel, document.getElementById('activity-creation'));
})(jQuery, _, ko);
</script>
{*<script type="text/javascript">
(function($, _, ko, undefined) {

	var aModel = function() {
		
		this.activityId = ko.observable($('[name="activity_id"]').val());
		
		this.playableVarId = ko.computed(function() {
			return (this.activityId + '_PL').substring(-20);
		}, this);
	};

	var amodel = new aModel();
	ko.applyBindings(amodel);
})(jQuery, _, ko);
</script>*}
