<script type="text/javascript" src="{$basePath}/js/jquery-ui.min.js"></script>
<script type="text/javascript" src="{$basePath}/js/knockout.min.js"></script>
<script type="text/javascript" src="{$basePath}/js/knockout-sortable.min.js"></script>
<script type="text/javascript">
	var kapafaaDefinitions = {$kapafaaDefinitions};
</script>
<script type="text/javascript">
(function($, _, ko, undefined) {

	var Parameter = function(data, parent) {
		this.name = data.name;
		this.type = data.type.indexOf('\\') === 0 ? data.type.substring(1) : data.type;
		if (data.type.indexOf('\\') > -1 || data.type.indexOf(':') === 0) {
			if (data.value) {
				this.value = ko.observableArray([new KapafaaObject(data.value)]);
			} else {
				this.value = ko.observableArray([]);
			}
		} else {
			this.value = ko.observable(data.value);
		}
		this.value.parent = this;
		this.parent = parent;
	};

	var KapafaaObject = function(data) {
		var self = this;
		this.data = data;
		
		this.name = data.name;
		this.type = data.type;
		this.kapafaa = data.kapafaa;
		this.parent = data.parent;
		this.params = ko.observableArray(_.map(data.params, function(item) {
			return new Parameter(item, self);
		}));
		
		this.filtered = ko.observable(true);
		this.searched = ko.observable(true);
		
		this.visible = ko.computed(function() {
			return this.filtered() && this.searched();
		}, this);
		
		this.getClass = function() {
			var cl = 'btn';
			switch (self.parent) {
				case 'Framework\\Kapafaa\\Configs\\Config': cl += ' btn-info'; break;
				case 'Framework\\Kapafaa\\Triggers\\Trigger': cl += ' btn-success'; break;
				case 'Framework\\Kapafaa\\Conditions\\Condition': cl += ' btn-warning'; break;
				case 'Framework\\Kapafaa\\Effects\\Effect': cl += ' btn-danger'; break;
			}
			return cl;
		};
		
		//@TODO better
		this.toKapafaa = ko.computed(function() {
			var result = this.kapafaa;
			_.each(this.params(), function(item) {
				var re = new RegExp("%" + item.name + "%", "i");
				if (item.type === ':negation') {
					result = result.replace(re, item.value() ? '!' : '');
				}
				else if (item.type.indexOf('\\') > -1) {
					result = result.replace(re, item.value().length && item.value()[0] !== undefined ? item.value()[0].toKapafaa() : '');
				} else {
					result = result.replace(re, item.value() ? item.value() : '');
				}
			});
			return result;
		}, this);
	};
	
	var KapafaaScript = function(data) {
		this.kapafaa = ko.observableArray(data);
		
		this.toKapafaa = ko.computed(function() {
			return "(\n" + _.map(this.kapafaa(), function(item) {
				return item.toKapafaa() + "\n";
			}).join('') + ")";
		}, this);
	};
	
	var kModel = function(definitions, observerScript, filterScript) {
		var self = this;
		
		this.definitions = ko.observableArray(definitions);
		
		this.scripts = ko.observableArray([new KapafaaScript([])]);
		this.filterScripts = ko.observableArray([new KapafaaScript([])]);
		
		$.get(
			{$parserLink},
			{
				"activity-observerScript": observerScript,
				"activity-filterScript": filterScript
			},
			function(data) {
				self.scripts([]);
				_.each(data.observer, function(item) {
					var content = [];
					_.each(item, function(obj) {
						content.push(new KapafaaObject(obj));
					});
					self.addScript(new KapafaaScript(content));
				});
				if (!self.scripts().length) {
					self.addEmptyScript();
				}
				self.filterScripts([]);
				_.each(data.filter, function(item) {
					var content = [];
					_.each(item, function(obj) {
						content.push(new KapafaaObject(obj));
					});
					self.addFilterScript(new KapafaaScript(content));
				});
				if (!self.filterScripts().length) {
					self.addEmptyFilterScript();
				}
			}
		);
		
		this.addScript = function(script) {
			self.scripts.push(script);
		};
		this.addEmptyScript = function() {
			self.addScript(new KapafaaScript([]));
		};
		this.removeScript = function() {
			if (self.scripts().length > 1) {
				self.scripts.pop();
			}
		};
		
		this.addFilterScript = function(script) {
			self.filterScripts.push(script);
		};
		this.addEmptyFilterScript = function() {
			self.addFilterScript(new KapafaaScript([]));
		};
		this.removeFilterScript = function() {
			if (self.filterScripts().length > 1) {
				self.filterScripts.pop();
			}
		};
		
		this.toKapafaa = ko.computed(function() {
			return _.map(this.scripts(), function(item) {
				return item.toKapafaa();
			}).join("\n\n");
		}, this);
		this.filterToKapafaa = ko.computed(function() {
			return _.map(this.filterScripts(), function(item) {
				return item.toKapafaa();
			}).join("\n\n");
		}, this);
		
		this.searchDefinitions = ko.observable('');
		this._searchDefinitions = ko.computed(function() {
			_.each(this.definitions(), function(item) {
				item.searched(item.name.toLowerCase().indexOf(self.searchDefinitions().toLowerCase()) > -1);
			});
		}, this);
		
		this.filterObjects = ko.observable('');
		this._filterObjects = ko.computed(function() {
			var parents = this.filterObjects() === '' ? [
				'Framework\\Kapafaa\\Configs\\Config',
				'Framework\\Kapafaa\\Triggers\\Trigger',
				'Framework\\Kapafaa\\Effects\\Effect',
				'Framework\\Kapafaa\\Conditions\\Condition',
			] : [this.filterObjects()];
			_.each(this.definitions(), function(item) {
				item.filtered(parents.indexOf(item.parent) > -1);
			});
		}, this);
		
		this.resetFilters = function() {
			self.searchDefinitions('');
			self.filterObjects('');
		};
		
		this.setFilters = function(item, event) {
			self.searchDefinitions('');
			self.filterObjects(item.type);
		};
		
		this.dropped = function(item, event, ui) {
			return new KapafaaObject(item);
		};
		
		this.trash = ko.observableArray([]);
		this.trashed = ko.computed(function() {
			if (this.trash.length > 0) {
				this.trash([]);
			}
		}, this);
		
		this.beforeMove = function(arg, event, ui) {
			if (arg.item.parent !== arg.targetParent.parent.type) {
				arg.cancelDrop = true;
			}
		};
		
		this.beforeMoveRoot = function(arg, event, ui) {
			var parents = [
				'Framework\\Kapafaa\\Configs\\Config',
				'Framework\\Kapafaa\\Triggers\\Trigger',
				'Framework\\Kapafaa\\Effects\\Effect',
				'Framework\\Kapafaa\\Conditions\\Condition'];
			if (parents.indexOf(arg.item.parent) < 0) {
				arg.cancelDrop = true;
			}
		};
	};
	
	var definitions = _.map(kapafaaDefinitions, function(item) {
		return new KapafaaObject(item);
	});
	
	var kmodel = new kModel(definitions, $('.observerScripts').val(), $('.filterScript').val());
	window.kModel = kmodel;
	ko.applyBindings(kmodel, document.getElementById('activity-creation'));
})(jQuery, _, ko);
</script>
<script type="text/javascript">
function setLocalVariableName(name) {
	$('.local_var').val(name);
}
</script>
<script type="text/javascript">
(function($, _, ko, undefined) {

	var sModel = function() {
		var self = this;
		
		this.activityId = ko.observable($('.activityId').val());
		
		this.setLocalVariableName = ko.computed(function() {
			setLocalVariableName(this.activityId() + '_PL');
		}, this);
	};
	
	var smodel = new sModel();
	ko.applyBindings(smodel, document.getElementById('activity-settings'));
})(jQuery, _, ko);
</script>
